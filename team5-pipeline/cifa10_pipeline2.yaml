apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: cifa10-run-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.1.2, pipelines.kubeflow.org/pipeline_compilation_time: '2022-05-03T16:47:37.043656',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "cifa10 model run pipeline",
      "inputs": [{"name": "img_path"}], "name": "cifa10-run"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.1.2}
spec:
  entrypoint: cifa10-run
  templates:
  - name: cifa10-model-run
    container:
      args: [--f, /tmp/inputs/f/data]
      command:
      - python3
      - -u
      - -c
      - |
        def cifa10_model_run(f):
            import tensorflow as tf

            img = tf.convert_to_tensor(f.read())
            #TODO kfserving inference service run
            return img

        import argparse
        _parser = argparse.ArgumentParser(prog='Cifa10 model run', description='')
        _parser.add_argument("--f", dest="f", type=argparse.FileType('rt'), required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = cifa10_model_run(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: cifa10-preprocessing-f, path: /tmp/inputs/f/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--f", {"inputPath": "f"}], "command": ["python3", "-u", "-c",
          "def cifa10_model_run(f):\n    import tensorflow as tf\n\n    img = tf.convert_to_tensor(f.read())\n    #TODO
          kfserving inference service run\n    return img\n\nimport argparse\n_parser
          = argparse.ArgumentParser(prog=''Cifa10 model run'', description='''')\n_parser.add_argument(\"--f\",
          dest=\"f\", type=argparse.FileType(''rt''), required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = cifa10_model_run(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "f"}], "name": "Cifa10 model
          run"}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: cifa10-preprocessing
    container:
      args: [--img-path, '{{inputs.parameters.img_path}}', --f, /tmp/outputs/f/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'opencv-python==4.5.1.48' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip
        install --quiet --no-warn-script-location 'opencv-python==4.5.1.48' --user)
        && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _parent_dirs_maker_that_returns_open_file(mode: str, encoding: str = None):
            def make_parent_dirs_and_return_path(file_path: str):
                import os
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                return open(file_path, mode=mode, encoding=encoding)
            return make_parent_dirs_and_return_path

        def cifa10_preprocessing(img_path, f):
        # def cifa10_preprocessing(img_path: str):
            import cv2
            import numpy as np
            import tensorflow as tf

            img = cv2.imread(img_path)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img = img.reshape(-1,3).T.reshape(-1)
            img = tf.convert_to_tensor([img], np.uint8)
            img = tf.reshape(img, (-1, 3, 32, 32))
            img = tf.transpose(img, (0, 2, 3, 1))
            img = tf.cast(img, tf.float32)
            img = img / 255

            f.write(str(img)) # cast to str

        import argparse
        _parser = argparse.ArgumentParser(prog='Cifa10 preprocessing', description='')
        _parser.add_argument("--img-path", dest="img_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--f", dest="f", type=_parent_dirs_maker_that_returns_open_file('wt'), required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = cifa10_preprocessing(**_parsed_args)
      image: tensorflow/tensorflow:2.1.0-py3
    inputs:
      parameters:
      - {name: img_path}
    outputs:
      artifacts:
      - {name: cifa10-preprocessing-f, path: /tmp/outputs/f/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--img-path", {"inputValue": "img_path"}, "--f", {"outputPath":
          "f"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3
          -m pip install --quiet --no-warn-script-location ''opencv-python==4.5.1.48''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''opencv-python==4.5.1.48'' --user) && \"$0\" \"$@\"", "python3", "-u",
          "-c", "def _parent_dirs_maker_that_returns_open_file(mode: str, encoding:
          str = None):\n    def make_parent_dirs_and_return_path(file_path: str):\n        import
          os\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n        return
          open(file_path, mode=mode, encoding=encoding)\n    return make_parent_dirs_and_return_path\n\ndef
          cifa10_preprocessing(img_path, f):\n# def cifa10_preprocessing(img_path:
          str):\n    import cv2\n    import numpy as np\n    import tensorflow as
          tf\n\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img
          = img.reshape(-1,3).T.reshape(-1)\n    img = tf.convert_to_tensor([img],
          np.uint8)\n    img = tf.reshape(img, (-1, 3, 32, 32))\n    img = tf.transpose(img,
          (0, 2, 3, 1))\n    img = tf.cast(img, tf.float32)\n    img = img / 255\n\n    f.write(str(img))
          # cast to str\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Cifa10
          preprocessing'', description='''')\n_parser.add_argument(\"--img-path\",
          dest=\"img_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--f\",
          dest=\"f\", type=_parent_dirs_maker_that_returns_open_file(''wt''), required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = cifa10_preprocessing(**_parsed_args)\n"], "image": "tensorflow/tensorflow:2.1.0-py3"}},
          "inputs": [{"name": "img_path", "type": "String"}], "name": "Cifa10 preprocessing",
          "outputs": [{"name": "f"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"img_path": "{{inputs.parameters.img_path}}"}'}
  - name: cifa10-run
    inputs:
      parameters:
      - {name: img_path}
    dag:
      tasks:
      - name: cifa10-model-run
        template: cifa10-model-run
        dependencies: [cifa10-preprocessing]
        arguments:
          artifacts:
          - {name: cifa10-preprocessing-f, from: '{{tasks.cifa10-preprocessing.outputs.artifacts.cifa10-preprocessing-f}}'}
      - name: cifa10-preprocessing
        template: cifa10-preprocessing
        arguments:
          parameters:
          - {name: img_path, value: '{{inputs.parameters.img_path}}'}
  arguments:
    parameters:
    - {name: img_path}
  serviceAccountName: pipeline-runner
